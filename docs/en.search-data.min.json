[{"id":0,"href":"/2020-21-DAW2-M12-Recipe-Me/entrega-2/backend/API/","title":"API","parent":"Backend","content":"Añadidos    Hacemos que el parametro createdAtde la entidad Usuario se costruya automáticamente des de backend. No es necesario introducirla des de frontend, pero se puede hacer.\n"},{"id":1,"href":"/2020-21-DAW2-M12-Recipe-Me/","title":"Recipeme docs","parent":"","content":""},{"id":2,"href":"/2020-21-DAW2-M12-Recipe-Me/entrega-2/docs/hugo/","title":"Hugo","parent":"Docs","content":"Template escogida: https://geekdocs.de/usage/getting-started/#option-1-download-pre-build-release-bundle\nDeployement: https://gohugo.io/getting-started/quick-start/\nCrear nuevo archivo:     hugo new nombre_archivo hugo new directorio/nombre_archivo\n Crear build en /docs:    Para hacer que la build se genere automaticamente en docs, hemos tenido que modificar el archivo de configuración config.toml. Añadimos la línea:\n publishDir = \u0026quot;../docs\u0026quot;\n Para generar la build ejecutamos el comando:\n hugo -D\n Poner imagenes     Colocar imagen en docs-src/static Enlazar la imagen con la ruta siguiente: /2020-21-DAW2-M12-Recipe-Me/imagen.jpeg  "},{"id":3,"href":"/2020-21-DAW2-M12-Recipe-Me/entrega-2/frontend/vista/","title":"Vista","parent":"Frontend","content":"Material UI    Material UI es una plataforma que ofrece una gran variedad de plantillas y componentes preconstruidos con el objetivo de facilitar y acelerar el desarrollo de paginas web.\nPara generar la vista nos estamos basando en varias de las plantillas y los componentes que nos ofrece https://material-ui.com/ adaptandolos a nuestras necesidades.\nMaquillaje main page    Por maquillaje nos estamos refiriendo a la parte visual, lo que conformaría composición de los elementos y su css.\nHemos definido exactamente como seran las rutas de nuestra web-app en el archivo de rutas router.js.\nMediante este archivo controlamos la dirección y el orden en que se visualizan las pantallas de nuestra web-app. Hemos cambiado la dirección de loginque antes se encontraba en la raiz de la url.\nAhora tenemos la siguiente distribución:\n Login: /login Registro: /register  Las direcciones debajo de main, contienen el componente navegador de main junto con un body que hace referencia a otros componentes lista, receta, perfil:\n Pagina main: /  Listas: /listas Recetas: /recetas Perfil: /perfil    Maquillaje login \u0026amp; register    Hemos adaptado una plantilla que nos ha proporcionado Material UI a nuestro login y register.\nLas funcionalidades ya estaban creadas, solo hemos modificado la parte visual.\nHemos añadido una pequeña funcionalidad de validación en frontend donde no se nos permite introducir valores null.\nFalta implementar las funcionalidades:\n ¿Has olvidado la contraseña? Recordar usuario y contraseña.  Peticiones a backend    Hemos preparado las peticiones a API para cada una de nuestras pantallas.\nPara ello hemos creado una série de componentes Tarjeta que se encargan de recibir los objetos obtenidos como respuesta de nuestras peticiones a la API.\nLas peticiones las hemos hecho mediante la herramienta fetch. Hemos usado las operaciones GETy POST.\n"},{"id":4,"href":"/2020-21-DAW2-M12-Recipe-Me/entrega-2/docs/","title":"Docs","parent":"Entrega 2","content":""},{"id":5,"href":"/2020-21-DAW2-M12-Recipe-Me/entrega-2/backend/","title":"Backend","parent":"Entrega 2","content":""},{"id":6,"href":"/2020-21-DAW2-M12-Recipe-Me/entrega-2/frontend/","title":"Frontend","parent":"Entrega 2","content":""},{"id":7,"href":"/2020-21-DAW2-M12-Recipe-Me/entrega-0/instrucciones/","title":"Instrucciones","parent":"Entrega 0","content":""},{"id":8,"href":"/2020-21-DAW2-M12-Recipe-Me/entrega-1/base_de_datos/","title":"Base_de_datos","parent":"Entrega 1","content":""},{"id":9,"href":"/2020-21-DAW2-M12-Recipe-Me/entrega-1/frontend/","title":"Frontend","parent":"Entrega 1","content":""},{"id":10,"href":"/2020-21-DAW2-M12-Recipe-Me/entrega-1/backend/","title":"Backend","parent":"Entrega 1","content":""},{"id":11,"href":"/2020-21-DAW2-M12-Recipe-Me/entrega-1/backend/API/","title":"Instrucciones Backend","parent":"Backend","content":"Tutorial: https://symfonycasts.com/screencast/api-platform/json-ld#play\nPasos para crear nuestra API:     Creamos un proyecto symfony:  \u0026gt; symfony new nom_proj Añadimos la dependencia principal:  \u0026gt; composer require api Añadimos otras utilidades:  \u0026gt; composer require maker --dev Creamos las entidades que necesitemos:  \u0026gt; bin/console make:entity Encendemos el servidor:  \u0026gt; symfony serve -d Para pararlo usaremos:  \u0026gt; symfony server:stop Resultados obtenidos:    Por cada entidad que hayamos creado, la dependencia API nos va a generar automáticamente los métodos HTTP base, que són:\n GET (general)\n  POST (general)\n  GET (pasamos id)\n  PUT (pasamos id)\n  DELETE (pasamos id)\n  PATCH (pasamos id)\n A partir de esta base nosotros podemos modificar nuestra entidad a voluntad. Podemos controlar:\n A cuales de estos métodos podemos acceder. Que parametros de los que contienen cada entidad podermos leer y escribir. Que parametros de cada entidad seran visibles des de los métodos HTTP de otras entidades.  Existen mas características que aún tenemos pendientes de explorar.    "},{"id":12,"href":"/2020-21-DAW2-M12-Recipe-Me/entrega-1/backend/DOCKER/","title":"Instrucciones Docker","parent":"Backend","content":"El objetivo es tener una base de datos en común, independiente de nuestra máquina. De este modo no necesitaremos modificar nunca el archivo de variables de entorno .env de nuestra aplicación.\n Descargar Docker desktop de la pagina oficial. Ir al directorio donde queremos instalar contenedores.  Instalamos un contenedor con mysql:    \u0026gt; bin/console make:docker:database  Ejecutamos TODOS los contenedores disponibles. Tarda unos segundos en encenderlo todo.  \u0026gt; docker-compose up -d  Para acceder a la base de datos:  \u0026gt; docker-compose exec database mysql -u root --password=password Otros comandos:     Paramos los contenedores activos: docker-compose stop Paramos contenedores y eliminamos su imagen por completo [elimina el mini server]: docker-compose down Chequea los contenedores que estan encendidos: docker-compose ps  Checkear las variables de entorno que esta ejecutando symfony    \u0026gt; symfony var:export --multiline Antes de empezar a trabajar siempre tendremos que hacer:    \u0026gt; docker-compose up -d "},{"id":13,"href":"/2020-21-DAW2-M12-Recipe-Me/entrega-1/backend/DOCTRINE/","title":"Instrucciones Doctrine","parent":"Backend","content":"Utilidad:      La dependencia doctrine va a generar automaticamente sentencias SQL para trabajar con una base de datos.\n  Podemos trabajar con una base de datos en nuestro MySql o podemos hacerlo trabajando con el MySqlde nuestro contenedor de Docker.\n  La diferencia entre trabajar con Docker o con nuestro servidor MySql esta en el comando:\n Para Servidor Docker: symfony console [sentencia] Para Servidor Local: bin/console [sentencia]  Configuramos la base de datos    Creamos la base de datos en el Contenedor Docker:\n\u0026gt; symfony console doctrine:database:create Creamos una migración (sentencia SQL a la espera de ser ejecutada):\n\u0026gt; symfony console make:migration Ejecutamos las migraciones que ya tenemos preparadas:\n\u0026gt; symfony console doctrine:migrations:migrate Para destruir la base de datos [luego eliminar migraciones manualmente]:\n\u0026gt; symfony console doctrine:database:drop --force "},{"id":14,"href":"/2020-21-DAW2-M12-Recipe-Me/entrega-1/backend/FIXTURES/","title":"Instrucciones Fixtures","parent":"Backend","content":"Las Fixtures o Utilidades son scripts php en nuestro proyecto Symfony que nos ayudan a realizar tareas de testeo y desarrollo de nuestra web app.\nCreacion:    Para crear una Fixture lo haremos con el comando:\nbin/console make:fixture Podemos crear tantas como queramos. Es recomendable crear un archivo Fixture para cada tabla que queramos rellenar, de este modo el codigo quedará mas legible.\nLa dirección de los archivos la encontraremos en AppSymfony/src/DataFixtures/\nInterrelacion:    Para insertar Datos que dependen de otros Datos lo hacemos mediante referencias.\nEjemplo:\n Queremos generar una receta que contiene ingredientes:  Cuando vamos a insertar un ingrediente, le añadimos un String de para referirnos al mismo. En RecetasFixture vamos a añadir una función para que recoja las referencias generadas en ingredientes. Cuando vamos a crear una receta le pasamos un ingrediente por referencia (el String que le hemos añadido al ingrediente en primera instancia).    Aplicación:    Nosotros hemos creado 4 clases que se encargan de rellenar nuestra DB con datos falsos pero posibles.\nLas ejecutamos en el terminal:\nsymfony console doctrine:fixtures:load FakerPHP:    FakerPHP es una libreria que nos permite generar datos aleatorios para poblar nuestra base de datos.\n Comida: https://github.com/jzonta/FakerRestaurant\n  Mas variedad de datos: https://packagist.org/packages/mbezhanov/faker-provider-collection\n "},{"id":15,"href":"/2020-21-DAW2-M12-Recipe-Me/entrega-1/backend/LOGIN/","title":"Instrucciones Login","parent":"Backend","content":"Dependencias:     Añadimos las dependencias que vamos a necesitar:  \u0026gt; composer require doctrine/doctrine-bundle \u0026gt; composer require doctrine/orm \u0026gt; composer require symfony/maker-bundle \u0026gt; composer require symfony/security-bundle \u0026gt; composer require symfony/web-profiler-bundle  Hay mas, pero en principio, el resto ya vendran por defecto.  Creamos los archivos necesarios con el maker de symfony.  \u0026gt; bin/console make:controller SecurityController Creamos la entidad Usuario:    \u0026gt; bin/console make:user  Queremos almacenar su informacion en la base de datos [YES]. Symfony se encarga automaticamente de generar el archivo y las rutas. También se encarga de definir las tablas y las columnas de nuestra BDD.  Creamos el sistema de autentificación:    \u0026gt; bin/console make:auth  Respondemos de manera logica a los parametros. Le asignamos como controlador la clase SecurityController que hemos creado antes. Vamos a ./src/Controllers/SecurityController y podemos cambiar la ruta por defecto.  Archivo de configuración:    App/config/packages/security.yaml En el apartado encoders lo configuramos para que use el algoritmo que nosotros queramos.\nsecurity: encoders: App\\Entity\\User: algorithm: md5 encode_as_base64: false iterations: 0 El resto se habrá configurado automáticamente según lo que hemos ido introduciendo en la linea de comandos.\n"},{"id":16,"href":"/2020-21-DAW2-M12-Recipe-Me/entrega-1/backend/OBSTACULOS/","title":"Obstaculos","parent":"Backend","content":"Login:    Tuvimos dificultades a la hora de testear el login de la pagina, porque aún no habíamos implementado la encriptación en el momento de insertar datos en la BDD y la herramienta de login encriptaba el password automáticamente antes de hacer la comprobación con la BDD.\nA la hora de testear la api asegurarse de guardar la contraseñas codificadas en la base de datos.\nbin/console security:encode-password Correcto:\n En base de datos guardamos: $argon2id$v=19$m=65536,t=4,p=1$zUZd7LRg219hXD44qgSEtg$1LR0AmBZjjovcXwztUyx7Jz2JbKE9CmBzHDuSHqF2HE En el POST ponemos el password sin codificar  Error:\n Guardar en la base de datos un plain string:   password\n Dependencias    Hemos tenido problemas de dependencias ya que la version de PHP era menor a la que el composer nos solicitaba. Lo hemos arreglado con el siguiente comand\nsymfony composer update "},{"id":17,"href":"/2020-21-DAW2-M12-Recipe-Me/entrega-1/backend/RECURSOS/","title":"Recursos para dudas","parent":"Backend","content":" https://symfony.com/doc/current/security.html https://symfony.com/doc/current/security/form_login_setup.html https://symfony.com/doc/current/configuration/secrets.html https://stackoverflow.com/questions/46734428/symfony-check-if-user-exist-in-database/46738306 https://auth0.com/blog/creating-your-first-symfony-app-and-adding-authentication/  "},{"id":18,"href":"/2020-21-DAW2-M12-Recipe-Me/entrega-0/instrucciones/setupSymfony/","title":"SetupSymfony","parent":"Instrucciones","content":"## https://symfonycasts.com/screencast/symfony\n Anar a ./config/routes.yaml Crear un \u0026ldquo;mapping\u0026rdquo; (direcció) que junti un path amb un controller Anam a ./src/Controller i crear el controlador. És un classe de PHP. Dintre del controlador crearem una funció pública que farà algo. Tornem a ./config/routes.yaml i afegim la funció a la direcció del controlador.  "},{"id":19,"href":"/2020-21-DAW2-M12-Recipe-Me/entrega-0/entrega_0/","title":"Entrega 0","parent":"Entrega 0","content":"Integrantes del equipo     Frank Palomino Kevin Rodriguez Sergi Francés  Descripción    Recipe-Me se trata de una aplicacion web de servicio al ciudadano de a pié. Facilita las tareas quotidianas relacionadas con las necesidades básicas de alimento:\n  Lista de la compra. ¿Por que ir al mercadona 3 veces a la semana cuando puedes comprarlo todo de una tacada?\n  Gestion de dietas. Aprendizaje de recetas que se escapan de nuestra zona de comfort.\n  Variedad de alimentos.\n  Comunidad en la que todos los usuarios pueden compartir y puntuar recetas. #Autoexploración, #conocimiento, #futuro, #perspectiva.\n  El proyecto sera tanto de front como de backend. Nosotros generaremos una base de datos relacional en MySQL, donde el mismo cliente nos ayudará a llenarla.\n  Con Symfony nos encargaremos de la parte backend y la gestión de usuarios y recetas.\n  Con React le daremos cara y ojos a la aplicación.\n   Nos gustaria que la app sea diseñada al estilo movile first para que la experiencia sea más adecuada al día a día del usuario.  Funcionamiento    Habrá un perfil de usuario.\nUsuario:     Registro: el usuario tiene que poder registrarse. Darse de baja: un usuario que se ha registrado tiene que poder darse de baja (borrarse). Login: el usuario registrado tiene que poder iniciar sesión. Logout: el usuario que ha iniciado sesión, tiene que poder cerrar sesión.  Recetas:     Buscar: un usuario registrado tiene que poder buscar recetas en la base de datos. Crear: un usuario registrado tiene que poder crear recetas nuevas en la base de datos. Borrado: un usuario tiene que poder borrar de una receta que haya creado él.  Listas de recetas:     Crear: un usuario tiene que poder crear listas privadas. Borrar: un usuario tiene que poder borrar sus listas. Listar propias: ver sus listas de recetas. Añadir recetas a sus listas. Quitar recetas de sus listas.  Lista de la compra     Generar lista de la compra a partir de una lista de recetas. Enviar la lista de la compra a través de mail.  Herramientas, lenguajes y frameworks utilizados     Herramientas:  GitHub. VS code. MySQL: Base de Datos   Lenguajes:  HTML: JavaScript PHP CSS   Frameworks:  React: Frontend Symfony: Backend   Otros:  Documentación: MarkDown Presentación: Next.js Capacitor: app android    Arquitectura de la aplicación    MVC\nEl cliente se comunica con el controlador que tendremos y este con la base de datos.\n"},{"id":20,"href":"/2020-21-DAW2-M12-Recipe-Me/entrega-0/instrucciones/registerForm/","title":"Registro","parent":"Instrucciones","content":"  Crear el formulari de registre: https://symfony.com/doc/4.2/doctrine/registration_form.html\n  Configurar base de dades https://symfony.com/doc/current/doctrine.html#configuring-the-database\n php bin/console doctrine:database:create php bin/console make:entity php bin/console make:migration php bin/console doctrine:migrations:migrate    "},{"id":21,"href":"/2020-21-DAW2-M12-Recipe-Me/entrega-0/instrucciones/loginForm/","title":"Instrucciones login Symfony","parent":"Instrucciones","content":"Tutorial youtube:    https://www.youtube.com/watch?v=1lKHlYeusgQ      TERMINAL: symfony new nombre_proyecto\n  Configurar database:\n Vamos al archivo ./.env y descomentamos la base de datos que vamos a utilizar. DATABASE_URL=\u0026ldquo;mysql://USUARIO:CONTRASEÑA@127.0.0.1:3306/DATABASE_NOMBRE?serverVersion=5.7\u0026rdquo; Borramos las otras para que no se confunda.    Insertamos en el terminal del proyecto:\n composer require symfony/security-bundle bin/console make:user bin/console make:migration    Conectamos con la base de datos:\n bin/console doctrine:migrations:migrate bin/console make:auth    En ./config/packages/security.yaml añadimos:\naccess_control:\n- path: ^/login$, roles: IS_AUTHENTICATED_ANONYMOUSLY - path: ^/*, roles: ROLE_USER\n- path: ^/admin, roles: ROLE_ADMIN\n  Conectamos con base de datos:\n composer require \u0026ndash;dev orm-fixtures bin/console doctrine:fixtures:load    En la base de datos se guardaran los usuarios junto con un contraseña cifrada.\n"},{"id":22,"href":"/2020-21-DAW2-M12-Recipe-Me/entrega-4/","title":"Entrega 4","parent":"Recipeme docs","content":""},{"id":23,"href":"/2020-21-DAW2-M12-Recipe-Me/entrega-3/","title":"Entrega 3","parent":"Recipeme docs","content":""},{"id":24,"href":"/2020-21-DAW2-M12-Recipe-Me/entrega-2/","title":"Entrega 2","parent":"Recipeme docs","content":""},{"id":25,"href":"/2020-21-DAW2-M12-Recipe-Me/entrega-1/","title":"Entrega 1","parent":"Recipeme docs","content":""},{"id":26,"href":"/2020-21-DAW2-M12-Recipe-Me/entrega-0/","title":"Entrega 0","parent":"Recipeme docs","content":""},{"id":27,"href":"/2020-21-DAW2-M12-Recipe-Me/entrega-1/base_de_datos/bbdd/","title":"Bbdd","parent":"Base_de_datos","content":""},{"id":28,"href":"/2020-21-DAW2-M12-Recipe-Me/entrega-1/frontend/Aplicacion/","title":"Aplicacion","parent":"Frontend","content":"Circuito de la aplicación    Para llevar a cabo nuestra idea primeramente hemos pensado en realizar un registro/login para que el usuario pueda, entrar a través del portal o registrarse.\nLogin    Se compone de dos inputs:\n Campo Username (Correo electrónico) Campo Password.  A nivel de código el Login tiene una variable de estado que controlará los inputs y los cambios en este. Que serán el email y el password.\nFunciones      handleChange: Controla los cambios que se produzcan en los inputs y actualiza la variable de estado form con los datos actualizados.\n  iniciarSesion: Esta función es llamada al clickar en el Boton de \u0026ldquo;Ingresar!\u0026rdquo;, lo que hace la función es hacer una petición ajax con la dependencia \u0026ldquo;axios\u0026rdquo; a la url de la api\n  const baseUrl = \u0026#34;https://localhost:8000/login\u0026#34;; A esta ruta se le envia los datos de usuario por POST en un json\nlet jsonPeticion = { email: this.state.form.email, password: this.state.form.password, }; Si el Loggin se ha hecho correctamente la respuesta de la API es un json con un id de user y el nombre del usuario, lo que guardamos en una cookie ayudados por la librería \u0026ldquo;universal-cookie\u0026rdquo;\nSi la validación de usuario no ha sido correcta se muestra un alert con la información \u0026ldquo;Contraseña o usuario incorrecto\u0026rdquo; para no dar pistas a un posible atacante sobre qué es lo que ha ido mal.\nUna vez todo a salido correctamente se redigirá al usuario a la página main de la aplicación\nwindow.location.href = \u0026#34;./main\u0026#34;;   registrarse: Este método es llamado cuando se da click al boton de registrarse, lo único que hace es rederigir al usuario a la página de Registro\n  componentDidMount: está función se encarga de comprobar si existe un usuario logeado a través de las cookies disponibles, si la cookie existe significa que hay un usuario loggeado y lo redirige automaticamente a la mantalla main.\n  Registro    Se compone de cuatro inputs:\n Email Nombre Completo Contraseña Repetir Contraseña  Al igual que el loggin, el Register tiene una variable de estado para controlar los inputs que se cumplimentan.\nFunciones      handChange: Controla los cambios que se produzcan en los inputs y actualiza la variable de estado form con los datos actualizados.\n  registrarse: Este método crea primero un json a partir de los datos extraidos del formulario, estos datos aún no están validados.\n  let jsonPeticion = { email: this.state.form.email, username: this.state.form.nombre, password: md5(this.state.form.password), }; Luego se realiza una petición a la API al endpoint\nconst baseUrl = \u0026#34;http://localhost:8000/users\u0026#34;; Si todo va bien el usuario será redirigido a la pantalla de Loggin para que pueda conectarse a su Perfil.\nSi algo sale mal le aparecerá un alert con el texto \u0026ldquo;Ha ocurrido un error\u0026rdquo;\nMain    El usuario no podrá acceder al main sin ser validado anteriormente.\nSi el usuario intenta entrar al main directamente será rederigido a la pantalla de Login.\nEl main contiene 3 divs:\n1 Sidebar.js (Component)    Este componente renderiza un mapeo de la array que esta en sidebarData.js.\n  SidebarData contiene la información de los directorios junto a su path para cuando desde el main cliquemos en el vaya a la ruta que necesita.\n  Este sidebar es pintado en el apartado ./css/main.css\n  Sidebardata,js(Component)    Este archivo simplemente contiene un array con la información que queremos mostrr en nuestro sidebar.\n2 Contenido    En este div es donde iremos renderizando las diferentes partes de nuestra aplicación mediante el route y switch siendo clicado por Links.\n\u0026lt;Router\u0026gt; \u0026lt;div className=\u0026#34;container\u0026#34;\u0026gt; \u0026lt;div className=\u0026#34;sideBar\u0026#34;\u0026gt; \u0026lt;Sidebar /\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div\u0026gt; \u0026lt;Switch\u0026gt; \u0026lt;Route path=\u0026#34;/home\u0026#34; exact\u0026gt; \u0026lt;Recetas /\u0026gt; \u0026lt;/Route\u0026gt; \u0026lt;/Switch\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div\u0026gt; \u0026lt;button className=\u0026#34;buttonLogout\u0026#34; onClick={()=\u0026gt;this.cerrarSesion()}\u0026gt; Cerrar Sesión \u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/Router\u0026gt; 3 Botón cerrar sesión     Toda aplicación tiene un botón para poder salir el cual nos devolvera al principio en el apartado de registrarse / login  \u0026lt;button className=\u0026#34;buttonLogout\u0026#34; onClick={()=\u0026gt;this.cerrarSesion()}\u0026gt; Cerrar Sesión \u0026lt;/button\u0026gt; cerrarSesion = () =\u0026gt; { cookie.remove(\u0026#34;user\u0026#34;, { path: \u0026#34;/\u0026#34; }); cookie.remove(\u0026#34;username\u0026#34;, { path: \u0026#34;/\u0026#34; }); window.location.href = \u0026#34;./\u0026#34;; }; Recetas    Dentro del menu de navegación el usuario se encuentra un apartado que muestra todas las recetas que existen en la aplicación. En este componente se debería hacer una petición a la API, la cual aún no está implementada, de momento existe un json que imita el formato devuelto por la API para poder hacer las pruebas de desarrollo. El componentes recibe un array de objetos que representan a cada una de las recetas, luego se renderiza cada una de estas recetas en una tarjeta para su correcta visualización.\n"},{"id":29,"href":"/2020-21-DAW2-M12-Recipe-Me/entrega-1/frontend/Obstaculos/","title":"Obstaculos","parent":"Frontend","content":"PROBLEMAS    Error from chokidar (macOS)    Al hacer npm start me aparecen varias líneas con un error que hace referencia a chokidar.\nLo he solucionado eliminando la carpeta entera de node_modules y reinstalandola con npm install.\nError con fetch (biblioteca nativa para hacer peticiones Ajax de JS)    Al hacer la petición con Fetch el servidor para realizar el loggin, el servidor no respondía, pero al hacer la petición desde un recurso externo como Postman, la petición si que se llevaba a cabo correctamente. Por lo que se decidió cambiar de herramienta de petición ajax a \u0026ldquo;Axios\u0026rdquo;. Con esta librería si que se hizo la petición correctamente y se pudo hacer el loggin con el usuario correspondiente.\nNo comprobación de la contraseña al registrarse    El input de repetir contraseña aún no comprueba que la contraseña del primer input sea la misma que la contraseña repetida\nNombre existente database    Si el nombre de la base de datos ya existe no permite registrarse.\nProblema a la hora de hacer el circuito    Al ser nuestro primer proyecto desconociamos como funcionan los Routes, Link y Switch de React. Nos cambiaba toda la pagina constantemente buscando el /home. Conseguimos poner el sidebar en un div que al clicar en el cambiase solamente el componente dentro de otro div para que el Sidebar estuviese siempre en activo. Hemos hecho lo mismo con el logout.\nBug al intentar acceder al Main sin ser validado    El usuario puede ver el contenido de la app por milesimas de segundo antes de ser devuelto al apartado de Login/registro\n"},{"id":30,"href":"/2020-21-DAW2-M12-Recipe-Me/entrega-1/frontend/React_Inicio/","title":"React Inicio","parent":"Frontend","content":"Generar proyecto    Entrar en la carpeta de front end y crear una aplicación react para empezar el proyecto.\nnpx create-react-app app-react Cambiamos a la carpeta de este \u0026ldquo;app-react\u0026rdquo;\ncd app-react Comando para iniciar en el directorio ./app-react\nnpm start Run Local    Para hacer un run en local del programa una vez clonado del repositorio\nnpm install Luego escribir en la linea de comandos\nnpm start Y se abrirá en el puerto 3000 del localhost\n"},{"id":31,"href":"/2020-21-DAW2-M12-Recipe-Me/entrega-2/frontend/aplicacion/","title":"Aplicacion","parent":"Frontend","content":"Login    Ahora los usarios se cargan desde la base de datos y se comprueba su autentificación. Para esto se está utilizando la librería universal-cookie, esta cookie se guardará al ser un login correcto.\nRecipeCards.js    se ha creado un boton de añadir a lista de la compra a cada receta\n\u0026lt;IconButton aria-label=\u0026#34;add to Lista\u0026#34; onClick={anadirLista}\u0026gt; \u0026lt;AddShoppingCartIcon /\u0026gt; \u0026lt;/IconButton\u0026gt; Este boton al ser clickado llama a la función anadirLista() que creará una cookie con los ingredientes de la receta clickada\nObstaculo    Al intentar guardar la lista de los ingredientes utilizados en una receta se intento utilizar un EventEmitter para poder enviar los datos de componente a componente, ya que el componente emisor y el componente emisor no tenían una relación de padre-hijo ni siblings. Pero esta implementación no sirvió. Por lo que se optó por utilizar cookies, está solición además es una ventaja para el usuario, ya que al estar guardada la lista de la compra en una cookie, cuando el usuario pierda la sesión esta lista seguirá guardada.\nListas.js    Se ha integrado un div más en el cual se pondrá la lista de la compra actual, que no estará guardada por defecto. Este componente recoge los datos de la cookie y los muestra en la lista de la compra.\nObstaculo    Se tuvo que corregir un error que se producía al entrar en en la lista y la cookie no existía. Introdución un condicional este error se solucionó\nif(cookie.get(\u0026#34;ingredientes\u0026#34;)) "},{"id":32,"href":"/2020-21-DAW2-M12-Recipe-Me/categories/","title":"Categories","parent":"Recipeme docs","content":""},{"id":33,"href":"/2020-21-DAW2-M12-Recipe-Me/tags/","title":"Tags","parent":"Recipeme docs","content":""}]