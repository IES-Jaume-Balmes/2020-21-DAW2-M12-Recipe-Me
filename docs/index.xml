<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Recipeme docs</title>
    <link>https://ies-jaume-balmes.github.io/2020-21-DAW2-M12-Recipe-Me/</link>
    <description>Recent content on Recipeme docs</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 11 May 2021 19:59:27 +0200</lastBuildDate><atom:link href="https://ies-jaume-balmes.github.io/2020-21-DAW2-M12-Recipe-Me/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Instrucciones Backend</title>
      <link>https://ies-jaume-balmes.github.io/2020-21-DAW2-M12-Recipe-Me/entrega-1/backend/API/</link>
      <pubDate>Tue, 11 May 2021 19:58:18 +0200</pubDate>
      
      <guid>https://ies-jaume-balmes.github.io/2020-21-DAW2-M12-Recipe-Me/entrega-1/backend/API/</guid>
      <description>Tutorial: https://symfonycasts.com/screencast/api-platform/json-ld#play
Pasos para crear nuestra API:     Creamos un proyecto symfony:  &amp;gt; symfony new nom_proj Añadimos la dependencia principal:  &amp;gt; composer require api Añadimos otras utilidades:  &amp;gt; composer require maker --dev Creamos las entidades que necesitemos:  &amp;gt; bin/console make:entity Encendemos el servidor:  &amp;gt; symfony serve -d Para pararlo usaremos:  &amp;gt; symfony server:stop Resultados obtenidos:    Por cada entidad que hayamos creado, la dependencia API nos va a generar automáticamente los métodos HTTP base, que són:</description>
    </item>
    
    <item>
      <title>Instrucciones Docker</title>
      <link>https://ies-jaume-balmes.github.io/2020-21-DAW2-M12-Recipe-Me/entrega-1/backend/DOCKER/</link>
      <pubDate>Tue, 11 May 2021 19:58:18 +0200</pubDate>
      
      <guid>https://ies-jaume-balmes.github.io/2020-21-DAW2-M12-Recipe-Me/entrega-1/backend/DOCKER/</guid>
      <description>El objetivo es tener una base de datos en común, independiente de nuestra máquina. De este modo no necesitaremos modificar nunca el archivo de variables de entorno .env de nuestra aplicación.
 Descargar Docker desktop de la pagina oficial. Ir al directorio donde queremos instalar contenedores.  Instalamos un contenedor con mysql:    &amp;gt; bin/console make:docker:database  Ejecutamos TODOS los contenedores disponibles. Tarda unos segundos en encenderlo todo.  &amp;gt; docker-compose up -d  Para acceder a la base de datos:  &amp;gt; docker-compose exec database mysql -u root --password=password Otros comandos:     Paramos los contenedores activos: docker-compose stop Paramos contenedores y eliminamos su imagen por completo [elimina el mini server]: docker-compose down Chequea los contenedores que estan encendidos: docker-compose ps  Checkear las variables de entorno que esta ejecutando symfony    &amp;gt; symfony var:export --multiline Antes de empezar a trabajar siempre tendremos que hacer:    &amp;gt; docker-compose up -d </description>
    </item>
    
    <item>
      <title>Instrucciones Doctrine</title>
      <link>https://ies-jaume-balmes.github.io/2020-21-DAW2-M12-Recipe-Me/entrega-1/backend/DOCTRINE/</link>
      <pubDate>Tue, 11 May 2021 19:58:18 +0200</pubDate>
      
      <guid>https://ies-jaume-balmes.github.io/2020-21-DAW2-M12-Recipe-Me/entrega-1/backend/DOCTRINE/</guid>
      <description>Utilidad:      La dependencia doctrine va a generar automaticamente sentencias SQL para trabajar con una base de datos.
  Podemos trabajar con una base de datos en nuestro MySql o podemos hacerlo trabajando con el MySqlde nuestro contenedor de Docker.
  La diferencia entre trabajar con Docker o con nuestro servidor MySql esta en el comando:
 Para Servidor Docker: symfony console [sentencia] Para Servidor Local: bin/console [sentencia]  Configuramos la base de datos    Creamos la base de datos en el Contenedor Docker:</description>
    </item>
    
    <item>
      <title>Instrucciones Fixtures</title>
      <link>https://ies-jaume-balmes.github.io/2020-21-DAW2-M12-Recipe-Me/entrega-1/backend/FIXTURES/</link>
      <pubDate>Tue, 11 May 2021 19:58:18 +0200</pubDate>
      
      <guid>https://ies-jaume-balmes.github.io/2020-21-DAW2-M12-Recipe-Me/entrega-1/backend/FIXTURES/</guid>
      <description>Las Fixtures o Utilidades son scripts php en nuestro proyecto Symfony que nos ayudan a realizar tareas de testeo y desarrollo de nuestra web app.
Creacion:    Para crear una Fixture lo haremos con el comando:
bin/console make:fixture Podemos crear tantas como queramos. Es recomendable crear un archivo Fixture para cada tabla que queramos rellenar, de este modo el codigo quedará mas legible.
La dirección de los archivos la encontraremos en AppSymfony/src/DataFixtures/</description>
    </item>
    
    <item>
      <title>Instrucciones Login</title>
      <link>https://ies-jaume-balmes.github.io/2020-21-DAW2-M12-Recipe-Me/entrega-1/backend/LOGIN/</link>
      <pubDate>Tue, 11 May 2021 19:58:18 +0200</pubDate>
      
      <guid>https://ies-jaume-balmes.github.io/2020-21-DAW2-M12-Recipe-Me/entrega-1/backend/LOGIN/</guid>
      <description>Dependencias:     Añadimos las dependencias que vamos a necesitar:  &amp;gt; composer require doctrine/doctrine-bundle &amp;gt; composer require doctrine/orm &amp;gt; composer require symfony/maker-bundle &amp;gt; composer require symfony/security-bundle &amp;gt; composer require symfony/web-profiler-bundle  Hay mas, pero en principio, el resto ya vendran por defecto.  Creamos los archivos necesarios con el maker de symfony.  &amp;gt; bin/console make:controller SecurityController Creamos la entidad Usuario:    &amp;gt; bin/console make:user  Queremos almacenar su informacion en la base de datos [YES].</description>
    </item>
    
    <item>
      <title>Obstaculos</title>
      <link>https://ies-jaume-balmes.github.io/2020-21-DAW2-M12-Recipe-Me/entrega-1/backend/OBSTACULOS/</link>
      <pubDate>Tue, 11 May 2021 19:58:18 +0200</pubDate>
      
      <guid>https://ies-jaume-balmes.github.io/2020-21-DAW2-M12-Recipe-Me/entrega-1/backend/OBSTACULOS/</guid>
      <description>Login:    Tuvimos dificultades a la hora de testear el login de la pagina, porque aún no habíamos implementado la encriptación en el momento de insertar datos en la BDD y la herramienta de login encriptaba el password automáticamente antes de hacer la comprobación con la BDD.
A la hora de testear la api asegurarse de guardar la contraseñas codificadas en la base de datos.
bin/console security:encode-password Correcto:</description>
    </item>
    
    <item>
      <title>Recursos para dudas</title>
      <link>https://ies-jaume-balmes.github.io/2020-21-DAW2-M12-Recipe-Me/entrega-1/backend/RECURSOS/</link>
      <pubDate>Tue, 11 May 2021 19:58:18 +0200</pubDate>
      
      <guid>https://ies-jaume-balmes.github.io/2020-21-DAW2-M12-Recipe-Me/entrega-1/backend/RECURSOS/</guid>
      <description> https://symfony.com/doc/current/security.html https://symfony.com/doc/current/security/form_login_setup.html https://symfony.com/doc/current/configuration/secrets.html https://stackoverflow.com/questions/46734428/symfony-check-if-user-exist-in-database/46738306 https://auth0.com/blog/creating-your-first-symfony-app-and-adding-authentication/  </description>
    </item>
    
    <item>
      <title>SetupSymfony</title>
      <link>https://ies-jaume-balmes.github.io/2020-21-DAW2-M12-Recipe-Me/entrega-0/instrucciones/setupSymfony/</link>
      <pubDate>Tue, 11 May 2021 19:53:22 +0200</pubDate>
      
      <guid>https://ies-jaume-balmes.github.io/2020-21-DAW2-M12-Recipe-Me/entrega-0/instrucciones/setupSymfony/</guid>
      <description>## https://symfonycasts.com/screencast/symfony
 Anar a ./config/routes.yaml Crear un &amp;ldquo;mapping&amp;rdquo; (direcció) que junti un path amb un controller Anam a ./src/Controller i crear el controlador. És un classe de PHP. Dintre del controlador crearem una funció pública que farà algo. Tornem a ./config/routes.yaml i afegim la funció a la direcció del controlador.  </description>
    </item>
    
    <item>
      <title>Entrega 0</title>
      <link>https://ies-jaume-balmes.github.io/2020-21-DAW2-M12-Recipe-Me/entrega-0/entrega_0/</link>
      <pubDate>Tue, 11 May 2021 19:53:02 +0200</pubDate>
      
      <guid>https://ies-jaume-balmes.github.io/2020-21-DAW2-M12-Recipe-Me/entrega-0/entrega_0/</guid>
      <description>Integrantes del equipo     Frank Palomino Kevin Rodriguez Sergi Francés  Descripción    Recipe-Me se trata de una aplicacion web de servicio al ciudadano de a pié. Facilita las tareas quotidianas relacionadas con las necesidades básicas de alimento:
  Lista de la compra. ¿Por que ir al mercadona 3 veces a la semana cuando puedes comprarlo todo de una tacada?
  Gestion de dietas.</description>
    </item>
    
    <item>
      <title>Registro</title>
      <link>https://ies-jaume-balmes.github.io/2020-21-DAW2-M12-Recipe-Me/entrega-0/instrucciones/registerForm/</link>
      <pubDate>Tue, 11 May 2021 19:53:02 +0200</pubDate>
      
      <guid>https://ies-jaume-balmes.github.io/2020-21-DAW2-M12-Recipe-Me/entrega-0/instrucciones/registerForm/</guid>
      <description>  Crear el formulari de registre: https://symfony.com/doc/4.2/doctrine/registration_form.html
  Configurar base de dades https://symfony.com/doc/current/doctrine.html#configuring-the-database
 php bin/console doctrine:database:create php bin/console make:entity php bin/console make:migration php bin/console doctrine:migrations:migrate    </description>
    </item>
    
    <item>
      <title>Instrucciones login Symfony</title>
      <link>https://ies-jaume-balmes.github.io/2020-21-DAW2-M12-Recipe-Me/entrega-0/instrucciones/loginForm/</link>
      <pubDate>Tue, 11 May 2021 19:52:40 +0200</pubDate>
      
      <guid>https://ies-jaume-balmes.github.io/2020-21-DAW2-M12-Recipe-Me/entrega-0/instrucciones/loginForm/</guid>
      <description>Tutorial youtube:    https://www.youtube.com/watch?v=1lKHlYeusgQ      TERMINAL: symfony new nombre_proyecto
  Configurar database:
 Vamos al archivo ./.env y descomentamos la base de datos que vamos a utilizar. DATABASE_URL=&amp;ldquo;mysql://USUARIO:CONTRASEÑA@127.0.0.1:3306/DATABASE_NOMBRE?serverVersion=5.7&amp;rdquo; Borramos las otras para que no se confunda.    Insertamos en el terminal del proyecto:
 composer require symfony/security-bundle bin/console make:user bin/console make:migration    Conectamos con la base de datos:
 bin/console doctrine:migrations:migrate bin/console make:auth    En .</description>
    </item>
    
    <item>
      <title></title>
      <link>https://ies-jaume-balmes.github.io/2020-21-DAW2-M12-Recipe-Me/entrega-1/base_de_datos/bbdd/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ies-jaume-balmes.github.io/2020-21-DAW2-M12-Recipe-Me/entrega-1/base_de_datos/bbdd/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://ies-jaume-balmes.github.io/2020-21-DAW2-M12-Recipe-Me/entrega-1/frontend/Aplicacion/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ies-jaume-balmes.github.io/2020-21-DAW2-M12-Recipe-Me/entrega-1/frontend/Aplicacion/</guid>
      <description>Circuito de la aplicación    Para llevar a cabo nuestra idea primeramente hemos pensado en realizar un registro/login para que el usuario pueda, entrar a través del portal o registrarse.
Login    Se compone de dos inputs:
 Campo Username (Correo electrónico) Campo Password.  A nivel de código el Login tiene una variable de estado que controlará los inputs y los cambios en este. Que serán el email y el password.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://ies-jaume-balmes.github.io/2020-21-DAW2-M12-Recipe-Me/entrega-1/frontend/Obstaculos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ies-jaume-balmes.github.io/2020-21-DAW2-M12-Recipe-Me/entrega-1/frontend/Obstaculos/</guid>
      <description>PROBLEMAS    Error from chokidar (macOS)    Al hacer npm start me aparecen varias líneas con un error que hace referencia a chokidar.
Lo he solucionado eliminando la carpeta entera de node_modules y reinstalandola con npm install.
Error con fetch (biblioteca nativa para hacer peticiones Ajax de JS)    Al hacer la petición con Fetch el servidor para realizar el loggin, el servidor no respondía, pero al hacer la petición desde un recurso externo como Postman, la petición si que se llevaba a cabo correctamente.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://ies-jaume-balmes.github.io/2020-21-DAW2-M12-Recipe-Me/entrega-1/frontend/React_Inicio/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ies-jaume-balmes.github.io/2020-21-DAW2-M12-Recipe-Me/entrega-1/frontend/React_Inicio/</guid>
      <description>Generar proyecto    Entrar en la carpeta de front end y crear una aplicación react para empezar el proyecto.
npx create-react-app app-react Cambiamos a la carpeta de este &amp;ldquo;app-react&amp;rdquo;
cd app-react Comando para iniciar en el directorio ./app-react
npm start Run Local    Para hacer un run en local del programa una vez clonado del repositorio
npm install Luego escribir en la linea de comandos
npm start Y se abrirá en el puerto 3000 del localhost</description>
    </item>
    
  </channel>
</rss>
